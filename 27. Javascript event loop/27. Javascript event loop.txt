JavaScript의 이벤트 루프(Event Loop)는 JavaScript가 단일 스레드(single-threaded) 언어임에도 불구하고 비동기 작업을 처리할 수 있는 메커니즘을 제공합니다
이벤트 루프는 "콜 스택(Call Stack)", "콜백 큐(Callback Queue)", 그리고 "웹 API(Web APIs)"와 같은 다른 컴포넌트와 함께 작동하여 이를 가능하게 합니다
다음은 이벤트 루프와 관련된 주요 컴포넌트와 그 작동 방식에 대한 설명입니다

주요 컴포넌트
콜 스택(Call Stack): 실행해야 할 함수들이 스택 형태로 쌓입니다
JavaScript는 이 콜 스택을 top-down 방식으로 실행합니다

웹 API(Web APIs): setTimeout, fetch, addEventListener 등과 같은 비동기 함수들은 웹 API로 처리됩니다

콜백 큐(Callback Queue): 웹 API에서 처리된 후에 실행되어야 할 콜백 함수들이 큐에 쌓입니다

이벤트 루프(Event Loop): 콜 스택이 비어 있을 때, 콜백 큐에서 함수를 콜 스택으로 이동시키는 역할을 합니다

작동 방식
초기 실행: JavaScript 파일이 로드되면, 전역 실행 컨텍스트가 생성되어 콜 스택에 쌓입니다

함수 호출: 함수가 호출되면, 해당 함수의 실행 컨텍스트가 콜 스택에 쌓입니다

비동기 작업: setTimeout나 fetch 등의 비동기 함수가 호출되면, 해당 작업은 웹 API로 이동합니다

콜백 큐: 웹 API에서 처리된 비동기 작업의 콜백 함수는 콜백 큐에 쌓입니다

이벤트 루프 체크: 이벤트 루프는 콜 스택이 비어 있는지 계속 확인합니다

콜백 이동: 콜 스택이 비어 있다면, 이벤트 루프는 콜백 큐에서 함수를 가져와 콜 스택에 쌓습니다

콜백 실행: 콜 스택에 쌓인 콜백 함수가 실행됩니다

반복: 위의 과정이 계속 반복되면서 비동기 작업이 처리됩니다

이벤트 루프는 이러한 방식으로 콜 스택과 콜백 큐, 그리고 웹 API 사이에서 상호 작용하여 비동기 처리를 가능하게 합니다